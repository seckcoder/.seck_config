# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	}  // namespace $1
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};

snippet for+
	for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4:/* code */}
	}

snippet foru+
	for (int32_t ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4:/* code */}
	}
snippet fort+
	for (size_t ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4:/* code */}
	}
	
snippet foru64+
	for (uint64_t ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4:/* code */}
	}
snippet inc+
	#include <${1:iostream}>${2}
snippet try
	try {
		${3:/*code*/}
	} catch(${1:Exception} &${2:e}) {
		${4:/*code*/}
	}${5}
snippet t_
	TEST(${1:test-case}, ${2:test}) {
		${3:/*code*/}
	}${4}
snippet tf_
	TEST_F(${1:test-case}, ${2:test}) {
		${3:/*code*/}
	}${4}
snippet unstd
	using namespace std;
snippet vfund
	virtual ${1:void} ${2:function_name}(${3});${4}
snippet cfund
	${1:void} ${2:function_name}(${3}) const;${4}
snippet sfund
	static ${1:void} ${2:function_name}(${3});${4}
snippet vcfund
	virtual ${1:void} ${2:function_name}(${3}) const;${4}
	
