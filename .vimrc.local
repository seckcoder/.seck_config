
Bundle 'Shougo/neocomplete.vim'
Bundle 'fatih/vim-go'
Bundle 'wlangstroth/vim-racket'
Bundle 'ehamberg/vim-cute-python'
Bundle 'scrooloose/nerdcommenter'
Bundle 'moll/vim-node'
Bundle "pangloss/vim-javascript"
Bundle "vim-scripts/paredit.vim"
Bundle "seckcoder/vim-seckcoder"

autocmd BufNewFile,BufRead *.go setf go

autocmd BufNewFile,BufRead *.cg setf cg
autocmd BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl setf glsl

"autocmd BufNewFile,BufRead *.js set syntax=jquery
autocmd BufNewFile,BufRead *.ki set syntax=racket
autocmd BufNewFile,BufRead *.rkt set syntax=racket

set encoding=utf-8
set fileencodings=utf-8,ucs-bom,gbk,gb18030,default,latin1
"Fencview plugin
let g:fencview_autodetect=1

au BufNewFile,BufRead *.thrift setf cpp
au BufNewFile,BufRead *.less setf css
au BufNewFile,BufRead YBUILD setf python

set cc=80

let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1
let g:vimclojure#DynamicHighlighting = 1
let vimclojure#WantNailgun = 0
let vimclojure#SplitPos = "left"
let vimclojure#SplitSize = 60
let vimclojure#FuzzyIndent = 1
let vimclojure#UseErrorBuffer = 0  "check :message for errors

"nerdcommenter
let g:NERDCustomDelimiters = {
    \ 'racket': { 'left': ';', 'leftAlt': '#|', 'rightAlt': '|#' }
    \}

let g:syntastic_ocaml_checkers = ['merlin']
let g:syntastic_python_checkers = ['pyflakes']

set omnifunc=syntaxcomplete#Complete

" Neo complete
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : ''
    \}

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.ocaml = '[^. *\t]\.\w*\|\h\w*|#'


"paredit
" au FileType cpp call PareditInitBuffer()
let g:paredit_disable_scheme = 1

" tab management
map <C-t> :tabnew<CR>
map [t :tabprev<CR>
map ]t :tabnext<CR>
